/// Mixin helper to output vendor-prefixed CSS
@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;
  }
  #{$property}: $value;
}

// for radius
@mixin roundy($radius) {
    @include prefix(border-radius, $radius, 'webkit' 'moz');
}

// for tansitions
@mixin myTransition($duration...) {
    @include prefix(transition, $duration, 'webkit' 'moz');
}

//box shadow
@mixin myShadow($shadow...) {
    @include prefix(box-shadow, $shadow , 'webkit' 'moz');
}

//transfrom
@mixin transForm($property...) {
  @include prefix(transform, $property , 'webkit' 'moz' 'ms');
}

// for middle element
@mixin elMiddle($elWidth, $elHeight) {
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0;
  top: 0;
  margin: auto;
  width: $elWidth;
  height: $elHeight;
}

// for postion
@mixin position($type: null, $top: null, $right: null, $bottom: null, $left: null) {
    position: $type;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}

// for opacity
@mixin opacity($opacity) {
  $opacity-ie:  $opacity * 100;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$opacity-ie+")";
   filter: alpha(opacity= $opacity-ie);
   opacity: $opacity;
}

// css filter
@mixin black_and_white($bw_value) {
  -webkit-filter: grayscale($bw_value);
  filter: grayscale($bw_value);
}

@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }
    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  animation: #{$str};
}

/*
## Triangle
* @include triangle within a pseudo element and add positioning properties (ie. top, left)
* $direction: up, down, left, right
*/
@mixin triangle($direction, $size: 8px, $color: #222){
  content: '';
  display: block;
  position: absolute;
  height: 0; width: 0;
  @if ($direction == 'up'){
    border-bottom: $size solid $color;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
  }
  @else if ($direction == 'down'){
    border-top: $size solid $color;
    border-left: $size solid transparent;
    border-right: $size solid transparent;
  }
  @else if ($direction == 'left'){
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
  }
  @else if ($direction == 'right'){
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
  }
}



/* close button */
@mixin close-btn($width: 24px, $height: 1px, $color:#666, $colorhover: #000){

  &:after, &:before {
    content: '';
    @include position(absolute, 0, 0, 0, 0);
    margin: auto;
    width: $width;
    height: $height;
    background-color: $color;
  }

  &:after {
     @extend %close;
     @include transForm(rotate(45deg));

  }

  &:before {
    @extend %close;
    @include transForm(rotate(-45deg));
  }

  &:hover:after, &:hover:before {
     background-color: $colorhover;
  }

}

/* Arrow */
@mixin arrow ($direction, $height:10px, $width:2px, $color:#222) {

  position: relative;
  &:after, &:before {
    content: '';
    background-color: $color;
    @include position(absolute, 0, 0, 0, 0);
    margin: auto;
  }

  &:after {
    transform: rotate(45deg);
  }

  &:before {
    transform: rotate(-45deg);
  }

  @if ($direction == "up") {

    &:after, &:before {
        height: 70%;
        width: 2px;
        transform-origin: 0 top;
    }

  }

  @else if ($direction == "down") {

    &:after, &:before {
        height: 70%;
        width: 5px;
        transform-origin: 0 bottom;
    }

  }

  @else if ($direction == "left") {
    &:after, &:before {
        height: 2px;
        width: 75%;
        transform-origin: center bottom;
    }
  }

  @else if ($direction == "right") {
    &:after, &:before {
        height: 2px;
        width: 75%;
        transform-origin: center bottom;
    }
  }
}
